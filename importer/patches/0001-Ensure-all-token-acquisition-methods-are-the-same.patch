From 002c4bf448ebf4a75971d1f1c71644b14ae4786e Mon Sep 17 00:00:00 2001
From: George Garside <apps@georgegarside.com>
Date: Sat, 3 May 2025 00:54:54 +0100
Subject: [PATCH] Ensure all token acquisition methods are the same

---
 app/Console/HaveAccess.php                    |  10 +-
 .../Shared/Authentication/SecretManager.php   |  29 ++---
 .../Shared/Import/Routine/ApiSubmitter.php    |   3 +-
 app/Support/Token.php                         | 102 ------------------
 4 files changed, 18 insertions(+), 126 deletions(-)
 delete mode 100644 app/Support/Token.php

diff --git a/app/Console/HaveAccess.php b/app/Console/HaveAccess.php
index b7738017..a804a16a 100644
--- a/app/Console/HaveAccess.php
+++ b/app/Console/HaveAccess.php
@@ -25,6 +25,7 @@ declare(strict_types=1);

 namespace App\Console;

+use App\Services\Shared\Authentication\SecretManager;
 use GrumpyDictator\FFIIIApiSupport\Exceptions\ApiHttpException;
 use GrumpyDictator\FFIIIApiSupport\Request\SystemInformationRequest;
 use GrumpyDictator\FFIIIApiSupport\Response\SystemInformationResponse;
@@ -37,14 +38,7 @@ trait HaveAccess
     private function haveAccess(): bool
     {
         $url             = (string) config('importer.url');
-        $token           = (string) config('importer.access_token');
-
-        // grab token from authentication header.
-        $headerToken     = (string) request()->header('Authorization');
-        if ('' !== $headerToken) {
-            $token = str_replace('Bearer ', '', $headerToken);
-            $this->line('Overrule token with token from Authorization header.');
-        }
+        $token           = SecretManager::getAccessToken();

         $this->line(sprintf('Trying to connect to %s...', $url));
         $this->line(sprintf('The last 25 chars of the access token are: %s', substr($token, -25)));
diff --git a/app/Services/Shared/Authentication/SecretManager.php b/app/Services/Shared/Authentication/SecretManager.php
index f8633b5b..396b72ae 100644
--- a/app/Services/Shared/Authentication/SecretManager.php
+++ b/app/Services/Shared/Authentication/SecretManager.php
@@ -33,25 +33,26 @@ use App\Services\Session\Constants;
 class SecretManager
 {
     /**
-     * Will return the access token. From a cookie if its there, otherwise from configuration.
+     * Will return the access token. From a cookie or header if it's there, otherwise from configuration.
      */
     public static function getAccessToken(): string
     {
-        if (!self::hasAccessToken()) {
-            app('log')->debug('No access token in hasAccessToken() session, will return config variable.');
-
-            return (string) config('importer.access_token');
+        if (session()->has(Constants::SESSION_ACCESS_TOKEN)) {
+            $token = session()->get(Constants::SESSION_ACCESS_TOKEN);
+            if ('' !== $token) {
+                return $token;
+            }
         }

-        return session()->get(Constants::SESSION_ACCESS_TOKEN);
-    }
+        app('log')->debug('No access token in session, will return header or config variable.');

-    /**
-     * Will verify if the user has an access token (in a cookie)
-     */
-    private static function hasAccessToken(): bool
-    {
-        return session()->has(Constants::SESSION_ACCESS_TOKEN) && '' !== session()->get(Constants::SESSION_ACCESS_TOKEN);
+        $token = request()?->header('Authorization', '') ?? '';
+        if (is_array($token)) {
+            $token = reset($token);
+        }
+        $token = str_replace('Bearer ', '', $token);
+
+        return $token ?: (string) config('importer.access_token');
     }

     public static function getBaseUrl(): string
@@ -124,7 +125,7 @@ class SecretManager
     {
         app('log')->debug(__METHOD__);
         // check for access token cookie. if not, redirect to flow to get it.
-        if (!self::hasAccessToken() && !self::hasRefreshToken() && !self::hasBaseUrl()) {
+        if ('' === self::getAccessToken() && !self::hasRefreshToken() && !self::hasBaseUrl()) {
             return false;
         }

diff --git a/app/Services/Shared/Import/Routine/ApiSubmitter.php b/app/Services/Shared/Import/Routine/ApiSubmitter.php
index 8ae020cf..49584e24 100644
--- a/app/Services/Shared/Import/Routine/ApiSubmitter.php
+++ b/app/Services/Shared/Import/Routine/ApiSubmitter.php
@@ -29,7 +29,6 @@ use App\Exceptions\ImporterErrorException;
 use App\Services\Shared\Authentication\SecretManager;
 use App\Services\Shared\Configuration\Configuration;
 use App\Services\Shared\Submission\ProgressInformation;
-use App\Support\Token;
 use GrumpyDictator\FFIIIApiSupport\Exceptions\ApiHttpException;
 use GrumpyDictator\FFIIIApiSupport\Model\Transaction;
 use GrumpyDictator\FFIIIApiSupport\Model\TransactionGroup;
@@ -72,7 +71,7 @@ class ApiSubmitter
         app('log')->info(sprintf('Going to submit %d transactions to your Firefly III instance.', $count));


-        $this->vanityURL  = Token::getVanityURL();
+        $this->vanityURL  = SecretManager::getVanityURL();

         app('log')->debug(sprintf('Vanity URL : "%s"', $this->vanityURL));

diff --git a/app/Support/Token.php b/app/Support/Token.php
deleted file mode 100644
index aac2060f..00000000
--- a/app/Support/Token.php
+++ /dev/null
@@ -1,102 +0,0 @@
-<?php
-
-/*
- * Token.php
- * Copyright (c) 2021 james@firefly-iii.org
- *
- * This file is part of the Firefly III Data Importer
- * (https://github.com/firefly-iii/data-importer).
- *
- * This program is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Affero General Public License as
- * published by the Free Software Foundation, either version 3 of the
- * License, or (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Affero General Public License for more details.
- *
- * You should have received a copy of the GNU Affero General Public License
- * along with this program.  If not, see <https://www.gnu.org/licenses/>.
- */
-
-declare(strict_types=1);
-
-namespace App\Support;
-
-use App\Exceptions\ImporterErrorException;
-use App\Services\Session\Constants;
-use Psr\Container\ContainerExceptionInterface;
-use Psr\Container\NotFoundExceptionInterface;
-
-/**
- * Class Token
- */
-class Token
-{
-    /**
-     * @throws ImporterErrorException
-     */
-    public static function getAccessToken(): string
-    {
-        try {
-            $value = session()->get(Constants::SESSION_ACCESS_TOKEN);
-        } catch (ContainerExceptionInterface|NotFoundExceptionInterface $e) {
-            throw new ImporterErrorException('No valid access token value.');
-        }
-        if (null === $value) {
-            // fall back to config:
-            $value = (string) config('importer.access_token');
-        }
-        if ('' === (string) $value) {
-            throw new ImporterErrorException('No valid access token value.');
-        }
-
-        return (string) $value;
-    }
-
-    /**
-     * @throws ImporterErrorException
-     */
-    public static function getVanityURL(): string
-    {
-        try {
-            $value = session()->get(Constants::SESSION_VANITY_URL);
-        } catch (ContainerExceptionInterface|NotFoundExceptionInterface $e) {
-            throw new ImporterErrorException('No valid vanity URL value.');
-        }
-        if (null === $value) {
-            $value = config('importer.vanity_url');
-        }
-        if (null === $value) {
-            $value = self::getURL();
-        }
-        if ('' === (string) $value) {
-            throw new ImporterErrorException('No valid vanity URL value.');
-        }
-
-        return (string) $value;
-    }
-
-    /**
-     * @throws ImporterErrorException
-     */
-    public static function getURL(): string
-    {
-        try {
-            $value = session()->get(Constants::SESSION_BASE_URL);
-        } catch (ContainerExceptionInterface|NotFoundExceptionInterface $e) {
-            throw new ImporterErrorException('No valid base URL value.');
-        }
-        if (null === $value) {
-            // fall back to config:
-            $value = (string) config('importer.url');
-        }
-        if ('' === (string) $value) {
-            throw new ImporterErrorException('No valid base URL value.');
-        }
-
-        return (string) $value;
-    }
-}
--
2.48.1
